def dfs(node, graph, visited, component):
    component.append(node)  # Store answer
    visited[node] = True  # Mark visited

    # Traverse to each adjacent node of a node
    for child in graph[node]:
        if not visited[child]:  # Check whether the node is visited or not
            dfs(child, graph, visited, component)  # Call the dfs recursively


if __name__ == "__main__":

    # Graph of nodes
    graph = {
        'A' : ['B'],
        'B' : ['A'],
        'C' : ['C']
    }
    node = 0  # Starting node
    visited = [False]*len(graph)  # Make all nodes to False initially
    component = []
    dfs(node, graph, visited, component)  # Traverse to each node of a graph
    print(f"Following is the Depth-first search: {component}")  # Print the answer


    lines = input()
    int line
		



        for (int i = 0; i < instances; i++) {
            lines = sc.nextInt();
            sc.nextLine();
            for (int j = 0; i < lines; ++i) {

            }
        }